

[Changes to picksheet.py - 2025-05-20 01:15:14.254622]
--- original
+++ updated
@@ -18,11 +18,11 @@
     df["variationAttributes"] = df.get("variationAttributes", "")
     df["trackingNumber"] = df.get("trackingNumber", "")
     df["shippingService"] = df.get("shippingService", "")
-    df["trackingStatus"] = df.get("trackingStatus", "")
+    df["trackingStatus"] = df.get("trackingStatus", "").str.upper()  # Normalize to uppercase
     df["categoryId"] = df.get("categoryId", "")
     df["itemCost"] = df.get("itemCost", 0)
     df["daysLate"] = df.get("daysLate", "")
-    df["reship"] = df.get("reship", False)
+    df["reship"] = df.get("reship", "").str.lower() == "true"  # Normalize to boolean
 
     df["note"] = df.get("note", "")
 
@@ -46,10 +46,10 @@
 
     # Filtered sheets
     sheets = {
-        "hot": df[df["daysLate"] == "HOT"],
+        "hot": df[df["daysLate"].str.upper() == "HOT"],  # Ensure comparison in uppercase
         "reships": df[df["reship"] == True],
         "notes": df[df["note"].str.strip() != ""],
-        "delivered": df[df["trackingStatus"] == "Delivered"],
+        "delivered": df[df["trackingStatus"] == "DELIVERED"],  # Corrected case sensitivity
     }
 
     for label, sub_df in sheets.items():


[Changes to orders.py - 2025-05-20 02:21:43.217518]
--- original
+++ updated
@@ -2,9 +2,39 @@
 import requests
 import pandas as pd
 import logging
-from auth import get_access_token
+import os
+from dotenv import load_dotenv
 
 logger = logging.getLogger(__name__)
+load_dotenv()
+
+def get_access_token():
+    # Load credentials and refresh token from .env file
+    client_id = os.getenv('EBAY_CLIENT_ID')
+    client_secret = os.getenv('EBAY_CLIENT_SECRET')
+    refresh_token = os.getenv('EBAY_REFRESH_TOKEN')
+
+    # Prepare the request for the OAuth token
+    url = "https://api.ebay.com/identity/v1/oauth2/token"
+    headers = {
+        "Content-Type": "application/x-www-form-urlencoded",
+        "Authorization": f"Basic {requests.auth._basic_auth_str(client_id, client_secret)}"
+    }
+    body = {
+        "grant_type": "refresh_token",
+        "refresh_token": refresh_token,
+        "scope": "https://api.ebay.com/oauth/api_scope"  # Adjust scope as necessary
+    }
+
+    # Make the request for a new access token
+    response = requests.post(url, headers=headers, data=body)
+    response_data = response.json()
+
+    if response.status_code != 200:
+        logger.error("Failed to retrieve access token: %s", response_data)
+        raise Exception("Failed to retrieve access token")
+
+    return response_data['access_token']
 
 def get_orders_raw():
     token = get_access_token()
@@ -27,32 +57,32 @@
     logging.info("Fetched %d orders from eBay API", len(orders))
     return orders
 
+def fetch_tracking_data_from_fulfillment(df):
+    """Extract trackingNumber, shippingService, trackingStatus from fulfillment data."""
+    results = []
 
-def fetch_tracking_data_from_fulfillment(df):
-    tracking_rows = []
     for _, row in df.iterrows():
-        order_id = row.get('orderId')
-        tracking_info = {
-            'orderId': order_id,
-            'trackingNumber': '',
-            'shippingService': '',
-            'trackingStatus': 'Unscanned'
-        }
+        order_id = row.get("orderId")
+        fulfillments = row.get("fulfillmentStartInstructions", [])
+        tracking_number = ""
+        shipping_service = ""
+        tracking_status = ""
 
-        fulfillments = row.get('fulfillmentStartInstructions', [])
-        if isinstance(fulfillments, list) and fulfillments:
+        if isinstance(fulfillments, list) and len(fulfillments) > 0:
             for f in fulfillments:
-                if 'shippingStep' in f and 'shipTo' in f['shippingStep']:
-                    carrier = f.get('shippingStep', {}).get('shippingCarrierCode', '')
-                    service = f.get('shippingStep', {}).get('shippingServiceCode', '')
-                    tracking = f.get('shippingStep', {}).get('shipmentTrackingNumber', '')
+                try:
+                    shipment = f.get("shippingStep", {}).get("shipmentTracking", {})
+                    tracking_number = shipment.get("trackingNumber", "") or tracking_number
+                    shipping_service = shipment.get("shippingCarrierCode", "") or shipping_service
+                    tracking_status = shipment.get("status", "") or tracking_status
+                except Exception:
+                    continue
 
-                    if tracking:
-                        tracking_info['trackingNumber'] = tracking
-                        tracking_info['shippingService'] = service
-                        tracking_info['trackingStatus'] = 'In Transit'
-                        break
+        results.append({
+            "orderId": order_id,
+            "trackingNumber": tracking_number,
+            "shippingService": shipping_service,
+            "trackingStatus": tracking_status
+        })
 
-        tracking_rows.append(tracking_info)
-
-    return pd.DataFrame(tracking_rows)
+    return pd.DataFrame(results)


[Changes to orders.py - 2025-05-20 02:31:53.080675]
--- original
+++ updated
@@ -1,88 +1,37 @@
-import json
+import os
 import requests
-import pandas as pd
-import logging
-import os
 from dotenv import load_dotenv
+import base64
 
-logger = logging.getLogger(__name__)
 load_dotenv()
 
+EBAY_CLIENT_ID = os.getenv("EBAY_CLIENT_ID")
+EBAY_CLIENT_SECRET = os.getenv("EBAY_CLIENT_SECRET")
+EBAY_REFRESH_TOKEN = os.getenv("EBAY_REFRESH_TOKEN")
+
 def get_access_token():
-    # Load credentials and refresh token from .env file
-    client_id = os.getenv('EBAY_CLIENT_ID')
-    client_secret = os.getenv('EBAY_CLIENT_SECRET')
-    refresh_token = os.getenv('EBAY_REFRESH_TOKEN')
-
-    # Prepare the request for the OAuth token
     url = "https://api.ebay.com/identity/v1/oauth2/token"
+    
+    # Correctly encode the client credentials in base64 for the Authorization header
+    credentials = f"{EBAY_CLIENT_ID}:{EBAY_CLIENT_SECRET}"
+    encoded_credentials = base64.b64encode(credentials.encode('utf-8')).decode('utf-8')
     headers = {
         "Content-Type": "application/x-www-form-urlencoded",
-        "Authorization": f"Basic {requests.auth._basic_auth_str(client_id, client_secret)}"
+        "Authorization": f"Basic {encoded_credentials}"
     }
-    body = {
+    data = {
         "grant_type": "refresh_token",
-        "refresh_token": refresh_token,
-        "scope": "https://api.ebay.com/oauth/api_scope"  # Adjust scope as necessary
+        "refresh_token": EBAY_REFRESH_TOKEN,
+        "scope": "https://api.ebay.com/oauth/api_scope"
     }
 
-    # Make the request for a new access token
-    response = requests.post(url, headers=headers, data=body)
-    response_data = response.json()
-
-    if response.status_code != 200:
-        logger.error("Failed to retrieve access token: %s", response_data)
+    response = requests.post(url, headers=headers, data=data)
+    if response.status_code == 200:
+        return response.json()["access_token"]
+    else:
+        print("Failed to retrieve access token:", response.json())
         raise Exception("Failed to retrieve access token")
-
-    return response_data['access_token']
 
 def get_orders_raw():
     token = get_access_token()
-    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
-    url = "https://api.ebay.com/sell/fulfillment/v1/order?limit=200"
-
-    response = requests.get(url, headers=headers)
-    orders = response.json().get("orders", [])
-
-    with open("raw_orders.json", "w", encoding="utf-8") as f:
-        json.dump(orders, f, indent=2)
-
-    # Also save with fulfillment for later debugging
-    for o in orders:
-        if "fulfillmentHrefs" in o:
-            o["fulfillmentHrefsCount"] = len(o["fulfillmentHrefs"])
-    with open("raw_orders_with_fulfillments.json", "w", encoding="utf-8") as f:
-        json.dump(orders, f, indent=2)
-
-    logging.info("Fetched %d orders from eBay API", len(orders))
-    return orders
-
-def fetch_tracking_data_from_fulfillment(df):
-    """Extract trackingNumber, shippingService, trackingStatus from fulfillment data."""
-    results = []
-
-    for _, row in df.iterrows():
-        order_id = row.get("orderId")
-        fulfillments = row.get("fulfillmentStartInstructions", [])
-        tracking_number = ""
-        shipping_service = ""
-        tracking_status = ""
-
-        if isinstance(fulfillments, list) and len(fulfillments) > 0:
-            for f in fulfillments:
-                try:
-                    shipment = f.get("shippingStep", {}).get("shipmentTracking", {})
-                    tracking_number = shipment.get("trackingNumber", "") or tracking_number
-                    shipping_service = shipment.get("shippingCarrierCode", "") or shipping_service
-                    tracking_status = shipment.get("status", "") or tracking_status
-                except Exception:
-                    continue
-
-        results.append({
-            "orderId": order_id,
-            "trackingNumber": tracking_number,
-            "shippingService": shipping_service,
-            "trackingStatus": tracking_status
-        })
-
-    return pd.DataFrame(results)
+    # ... additional code omitted ...


[Changes to token_generator.py - 2025-05-20 03:05:53.318795]
New file created.


[Changes to orders.py - 2025-05-21 23:05:20.728961]
New file created.
